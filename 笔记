Java基础知识:
一、重载：
重载与以下因素有关：
1、参数个数
2、参数类型不同
3、参数的多类型顺序不同

与以下因素无关：
1、与参数的名称无关
2、与方法的返回值类型无关

二、数组：
1、数组是引用类型
2、数组长度定义后不可改变
动态初始化：指定长度  数据类型[] 数组名称 = new 数组类型[长度]
静态初始化：指定内容  数据类型[] 数组名称 = new 数组类型{元素1，元素2，元素3.。。。} / 数据类型[] 数组名称 = {元素1，元素2，元素3}

动态初始化时候，默认值为：
1、int : 0
2、float：0.0
3、字符类型：'\u0000'
4、boolean：false
5、引用类型:null

Java内存划分:
1、栈：存放的是方法内的局部变量，方法的运行一定要在栈当中运行
2、堆：new 出来的东西在堆内
3、方法区：存储 .class 相关信息，包含方法的信息
4、本地方法栈：与操作系统相关
5、寄存器：与CPU相关

类的成员变量与成员方法：
1、成员变量是直接定义在类当中，在方法外部
2.成员方法不要写static关键字

创建对象：
类名称 对象名 = new 类名称（）

局部变量和成员变量的关系：
1.定义位置不一样
局部：方法内部
成员：方法外部，直接写在类中

2. 作用范围不一样：
局部：只有方法内可以使用
成员：整个类全都可以使用

3、默认值不一样
局部：没有默认值
成员：会有默认值，和数组默认值一样

4.内存位置不一样：
局部：栈内存
成员：堆内存

5.生命周期不一样
局部：随着方法进栈而诞生，随着方法出栈而消失
成员：随着对象创建而诞生，随着对象被垃圾回收而消失

面向对象三大基本特征：
封装  继承  多态

封装：
1.使用方法
2.使用private ，间接获取private的时候，使用set，get方法对
setter方法：不能有返回值，参数类型和成员变量对应
getter方法：不能有参数，返回值类型和成员变量对应

当方法的局部变量和类的成员变量重名的时候，根据就近原则，会优先使用局部变量，如果想访问本类中的成员变量，需要this.成员变量

构造方法：
	public 类名称（参数类型 参数名称）{
		方法体
	}
1.构造方法的名称和所在类的名称完全一样
2.构造方法不要写返回值类型，void都不写
3、构造方法不能return 一个具体的返回值
4.构造方法可以重载

标准类的写法：
1、所有的成员变量都要使用private关键字修饰
2.为每一个成员变量编写一对getter和setter方法
3.编写一个无参数的构造方法
4.编写一个全参数的构造方法

引用类型的一般使用步骤：
1、导包：
import 包路径.类名称
如果需要使用的目标类和当前类位于同一个包下，则可以省略导包语句不写
只有java.lang包下的内容不需要导包，其他的包都需要import语句，如String

2.创建
类名称 对象名 = new 类名称（）

3、使用
对象名.成员方法

匿名对象：
只有右边的对象，没有左边的名字和赋值运算符，new 类名称（）
匿名对象只能使用唯一的一次，下次再用不得不再创建一个对象

ArrayList<E> :
<E>表示泛型，泛型只能是引用类型。例：ArrayList<String> arr = new ArrayList<>();
从JDK1.7+开始，右侧的尖括号内部可以不写内容，但是<>本身要写
ArrayList常用的方法：
1.public boolean add(E e)：添加元素，参数类型与泛型一致
2、public E get(int index):根据索引获取元素
3、public E remove(int index):根据索引删除元素
4、public int size()：获取长度

如果希望向集合ArrayList当中存储基本类型数据，必须使用基本类型对应的包装类：
byte Byte
short Short
int Integer
long Long
float Float
double Double
char Character
boolean Boolean

字符串：
1.内容不可变
2.字符串共享使用
3.效果上相当于char[]字符数组，底层原理是byte[]字节数组

创建方式：
1.public String()
2.public String(char[] array)
3.public String(byte[] array)
4.String str = "";

对于基本类型来说，==是进行数值比较
对于引用类型来说，==是地址值进行比较

String str1 = "abc";
String str2 = "abc";
str1 == str2 //True
因为Str1和str2指向的都是同一个地址

比较字符串内容的两个方法：
1.str1.equals(str2);equals具有对称性，如果比较双方一个是常量，一个是变量，推荐把常量写在前面
2.str1.equalsIgnoreCase(str2);忽略大小写

String当中获取相关的常用方法有：
1、public int length();
2、public String concat(String str);拼接字符串
3、public char charAt(int index);
4、public int indexOf(String str);查找str在本字符串首次出现的索引位置，如果没有返回-1

String的截取方法：
1、public String substring(int index):从index一直到字符串末尾，返回新字符串
2、public String sbustring(int begin,int end):左闭右开

String的转换方法：
1、public char[] toCharArray():将当前字符串拆分成为字符数组作为返回值
2、public byte[] getBytes():获得当前字符串底层的字节数组
3、public String replace(CharSequence oldString, CharSequence newString):将所有出现的老字符串替换为新的字符串，返回新的

分割字符串的方法：
1、public String[] split(String regex):按照参数规则，将字符串分成若干部分，当“.”的时候，要加“\\.”

使用静态方法或者静态变量的时候，最好使用类名.方法/类名.变量来使用
注意：
1.静态只能访问静态
2.静态方法当中不能用this

静态代码块格式：
public class 类名称{
	static{
		XXX
	}
}
特点：当第一次用到本类的时候，静态代码块执行唯一的一次，静态内容总是优先于非静态，所以静态代码块比构造方法先执行
用途：用于一次性地对静态成员变量进行赋值

Arrays工具类：
1、public static String toString(数组):将数组变成字符串“[元素1,元素2，元素3]”
2、public static void sort(数组):升序排序，注意：如果是数值，按照升序，如果是字符串，按照字符升序，如果是自定义的类型，那么这个自定义的类需要有comparable或者comparator接口支持

Math工具类：
1、public static double abs(double num):绝对值
2、public static double ceil(double num):向上取整
3、public static double floor(double num)：向下取整
4、public static long round(double num)：四舍五入 

继承：
父类：
public class 父类名称{
	//..
}
子类：
public class 子类名称 extends 父类名称{
	
}

继承访问成员变量：
1.直接通过子类对象访问成员变量：
	等号左边是谁，就优先用谁，没有则向上找
2.间接通过成员方法访问成员变量：
	该方法属于谁，就优先用谁，没有就向上找

局部变量： 直接写成员变量名
本类的成员变量： this.成员变量ming
父类的成员变量:  super.成员变量名

重写：继承关系中，方法和参数都一样，使用@Override
注意：
1.子类方法的返回值类型必须小于等于父类方法的返回值类型 比如子类是Object，父类是String，这样会报错
2、子类方法的权限必须大于等于父类方法的权限

继承关系中，父子类构造方法的访问特点：
1.方法当中有一个默认隐含的“super（）”调用 ，所以是先调用父类的构造，后执行子类的构造 
2.子类构造可以通过super关键字来调用父类重载构造 
3.super的父类构造调用，必须是子类构造方法飞第一个语句，不能一个子类构造调用多次super构造，只能 有一个

this(...)调用构造方法必须是第一个语句，也是唯一一个
this（）和super（）不能同时使用

Java是单继承，一个类的直接父类只有唯一一个 即：class D extends A,c{} 错误的

抽象方法：public abstract void xxx();
抽象类：抽象方法所在的类，必须是抽象类 public abstract class xxx{}


